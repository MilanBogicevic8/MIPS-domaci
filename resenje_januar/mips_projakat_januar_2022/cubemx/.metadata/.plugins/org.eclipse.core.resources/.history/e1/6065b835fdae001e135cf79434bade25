/*
 * driver_temp.c
 *
 *  Created on: Jan 6, 2022
 *      Author: Marko Micovic
 */

#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"

#include "adc.h"
#include "gpio.h"

// MAX VOLTAGE = 5V
#define MAX_VOLTAGE 5.0
// ADC RESOLUTION = 2^12 = 4096 (12-bit resolution)
#define RESOLUTION 4096.0

static TaskHandle_t TEMP_TaskHandle;
static QueueHandle_t TEMP_MailboxHandle;


float windwaneSpeed=0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
	BaseType_t woken = pdFALSE;
	vTaskNotifyGiveFromISR(TEMP_TaskHandle, &woken);
	portYIELD_FROM_ISR(woken);
}

static void TEMP_Task(void *parameter)
{
	while (1)
	{
		HAL_ADC_Start_IT(&hadc1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

		float value = HAL_ADC_GetValue(&hadc1); // get raw conversion result
		value *= MAX_VOLTAGE / RESOLUTION; // translate into the voltage value
		value *= 100; // translate into temperature value (problem specific)

		xQueueOverwrite(TEMP_MailboxHandle, &value);

		HAL_ADC_Start_IT(&hadc1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

		windwaneSpeed=HAL_ADC_GetValue(&hadc1);

		vTaskDelay(pdMS_TO_TICKS(200));
	}
}

float TEMP_GetCurrentValue()
{
	float result = 0.0;
	xQueuePeek(TEMP_MailboxHandle, &result, portMAX_DELAY);
	return result;
}

float Windwane_GetCurrentValue(){
	return windwaneSpeed;
}

void TEMP_Init()
{
	TEMP_MailboxHandle = xQueueCreate(1, sizeof(float));
	xTaskCreate(TEMP_Task, "TEMP_Task", 64, NULL, 2, &TEMP_TaskHandle);
}


float adcToWindvane(int adcValue) {
	switch (adcValue) {
	case 952:
		return 0.0;
	case 2471:
		return 22.5;
	case 2250:
		return 45.0;
	case 3760:
		return 67.5;
	case 3723:
		return 90.0;
	case 3831:
		return 112.5;
	case 3356:
		return 135.0;
	case 3589:
		return 157.5;
	case 2946:
		return 180.0;
	case 3116:
		return 202.5;
	case 1575:
		return 225.0;
	case 1698:
		return 247.5;
	case 315:
		return 270.0;
	case 786:
		return 292.5;
	case 547:
		return 315.0;
	case 1285:
		return 337.5;
	default:
		return 0.0;
	}
}
